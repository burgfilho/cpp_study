// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rtb.proto

#include "rtb.pb.h"
#include "rtb.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sita {
namespace rtb {

static const char* RTB_method_names[] = {
  "/sita.rtb.RTB/Help",
  "/sita.rtb.RTB/Add",
  "/sita.rtb.RTB/Delete",
  "/sita.rtb.RTB/Clear",
  "/sita.rtb.RTB/Display",
};

std::unique_ptr< RTB::Stub> RTB::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RTB::Stub> stub(new RTB::Stub(channel));
  return stub;
}

RTB::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Help_(RTB_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Add_(RTB_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(RTB_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Clear_(RTB_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Display_(RTB_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RTB::Stub::Help(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::sita::rtb::HelpReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Help_, context, request, response);
}

void RTB::Stub::experimental_async::Help(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Help_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::HelpReply>* RTB::Stub::AsyncHelpRaw(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::HelpReply>::Create(channel_.get(), cq, rpcmethod_Help_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::HelpReply>* RTB::Stub::PrepareAsyncHelpRaw(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::HelpReply>::Create(channel_.get(), cq, rpcmethod_Help_, context, request, false);
}

::grpc::Status RTB::Stub::Add(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::sita::rtb::AddReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Add_, context, request, response);
}

void RTB::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::AddReply>* RTB::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::AddReply>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::AddReply>* RTB::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::AddReply>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, false);
}

::grpc::Status RTB::Stub::Delete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::sita::rtb::DeleteReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void RTB::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::DeleteReply>* RTB::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::DeleteReply>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::DeleteReply>* RTB::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::DeleteReply>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status RTB::Stub::Clear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::sita::rtb::ClearReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Clear_, context, request, response);
}

void RTB::Stub::experimental_async::Clear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::ClearReply>* RTB::Stub::AsyncClearRaw(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::ClearReply>::Create(channel_.get(), cq, rpcmethod_Clear_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::ClearReply>* RTB::Stub::PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::ClearReply>::Create(channel_.get(), cq, rpcmethod_Clear_, context, request, false);
}

::grpc::Status RTB::Stub::Display(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::sita::rtb::DisplayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Display_, context, request, response);
}

void RTB::Stub::experimental_async::Display(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Display_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::DisplayReply>* RTB::Stub::AsyncDisplayRaw(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::DisplayReply>::Create(channel_.get(), cq, rpcmethod_Display_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sita::rtb::DisplayReply>* RTB::Stub::PrepareAsyncDisplayRaw(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sita::rtb::DisplayReply>::Create(channel_.get(), cq, rpcmethod_Display_, context, request, false);
}

RTB::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RTB_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RTB::Service, ::sita::rtb::HelpRequest, ::sita::rtb::HelpReply>(
          std::mem_fn(&RTB::Service::Help), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RTB_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RTB::Service, ::sita::rtb::AddRequest, ::sita::rtb::AddReply>(
          std::mem_fn(&RTB::Service::Add), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RTB_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RTB::Service, ::sita::rtb::DeleteRequest, ::sita::rtb::DeleteReply>(
          std::mem_fn(&RTB::Service::Delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RTB_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RTB::Service, ::sita::rtb::ClearRequest, ::sita::rtb::ClearReply>(
          std::mem_fn(&RTB::Service::Clear), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RTB_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RTB::Service, ::sita::rtb::DisplayRequest, ::sita::rtb::DisplayReply>(
          std::mem_fn(&RTB::Service::Display), this)));
}

RTB::Service::~Service() {
}

::grpc::Status RTB::Service::Help(::grpc::ServerContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RTB::Service::Add(::grpc::ServerContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RTB::Service::Delete(::grpc::ServerContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RTB::Service::Clear(::grpc::ServerContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RTB::Service::Display(::grpc::ServerContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sita
}  // namespace rtb

