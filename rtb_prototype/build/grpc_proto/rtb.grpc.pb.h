// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rtb.proto
#ifndef GRPC_rtb_2eproto__INCLUDED
#define GRPC_rtb_2eproto__INCLUDED

#include "rtb.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace sita {
namespace rtb {

class RTB final {
 public:
  static constexpr char const* service_full_name() {
    return "sita.rtb.RTB";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Help(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::sita::rtb::HelpReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::HelpReply>> AsyncHelp(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::HelpReply>>(AsyncHelpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::HelpReply>> PrepareAsyncHelp(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::HelpReply>>(PrepareAsyncHelpRaw(context, request, cq));
    }
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::sita::rtb::AddReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::AddReply>> AsyncAdd(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::AddReply>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::AddReply>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::AddReply>>(PrepareAsyncAddRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::sita::rtb::DeleteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DeleteReply>> AsyncDelete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DeleteReply>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DeleteReply>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DeleteReply>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Clear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::sita::rtb::ClearReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::ClearReply>> AsyncClear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::ClearReply>>(AsyncClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::ClearReply>> PrepareAsyncClear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::ClearReply>>(PrepareAsyncClearRaw(context, request, cq));
    }
    virtual ::grpc::Status Display(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::sita::rtb::DisplayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DisplayReply>> AsyncDisplay(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DisplayReply>>(AsyncDisplayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DisplayReply>> PrepareAsyncDisplay(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DisplayReply>>(PrepareAsyncDisplayRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Help(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Add(::grpc::ClientContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Clear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Display(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::HelpReply>* AsyncHelpRaw(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::HelpReply>* PrepareAsyncHelpRaw(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::AddReply>* AsyncAddRaw(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::AddReply>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DeleteReply>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DeleteReply>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::ClearReply>* AsyncClearRaw(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::ClearReply>* PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DisplayReply>* AsyncDisplayRaw(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sita::rtb::DisplayReply>* PrepareAsyncDisplayRaw(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Help(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::sita::rtb::HelpReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::HelpReply>> AsyncHelp(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::HelpReply>>(AsyncHelpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::HelpReply>> PrepareAsyncHelp(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::HelpReply>>(PrepareAsyncHelpRaw(context, request, cq));
    }
    ::grpc::Status Add(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::sita::rtb::AddReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::AddReply>> AsyncAdd(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::AddReply>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::AddReply>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::AddReply>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::sita::rtb::DeleteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::DeleteReply>> AsyncDelete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::DeleteReply>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::DeleteReply>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::DeleteReply>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Clear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::sita::rtb::ClearReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::ClearReply>> AsyncClear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::ClearReply>>(AsyncClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::ClearReply>> PrepareAsyncClear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::ClearReply>>(PrepareAsyncClearRaw(context, request, cq));
    }
    ::grpc::Status Display(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::sita::rtb::DisplayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::DisplayReply>> AsyncDisplay(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::DisplayReply>>(AsyncDisplayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::DisplayReply>> PrepareAsyncDisplay(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sita::rtb::DisplayReply>>(PrepareAsyncDisplayRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Help(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response, std::function<void(::grpc::Status)>) override;
      void Add(::grpc::ClientContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response, std::function<void(::grpc::Status)>) override;
      void Clear(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response, std::function<void(::grpc::Status)>) override;
      void Display(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::HelpReply>* AsyncHelpRaw(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::HelpReply>* PrepareAsyncHelpRaw(::grpc::ClientContext* context, const ::sita::rtb::HelpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::AddReply>* AsyncAddRaw(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::AddReply>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::sita::rtb::AddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::DeleteReply>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::DeleteReply>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::sita::rtb::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::ClearReply>* AsyncClearRaw(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::ClearReply>* PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::sita::rtb::ClearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::DisplayReply>* AsyncDisplayRaw(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sita::rtb::DisplayReply>* PrepareAsyncDisplayRaw(::grpc::ClientContext* context, const ::sita::rtb::DisplayRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Help_;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Clear_;
    const ::grpc::internal::RpcMethod rpcmethod_Display_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Help(::grpc::ServerContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response);
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response);
    virtual ::grpc::Status Clear(::grpc::ServerContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response);
    virtual ::grpc::Status Display(::grpc::ServerContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Help : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Help() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Help() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Help(::grpc::ServerContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHelp(::grpc::ServerContext* context, ::sita::rtb::HelpRequest* request, ::grpc::ServerAsyncResponseWriter< ::sita::rtb::HelpReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::sita::rtb::AddRequest* request, ::grpc::ServerAsyncResponseWriter< ::sita::rtb::AddReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::sita::rtb::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::sita::rtb::DeleteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Clear() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClear(::grpc::ServerContext* context, ::sita::rtb::ClearRequest* request, ::grpc::ServerAsyncResponseWriter< ::sita::rtb::ClearReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Display() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Display(::grpc::ServerContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisplay(::grpc::ServerContext* context, ::sita::rtb::DisplayRequest* request, ::grpc::ServerAsyncResponseWriter< ::sita::rtb::DisplayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Help<WithAsyncMethod_Add<WithAsyncMethod_Delete<WithAsyncMethod_Clear<WithAsyncMethod_Display<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Help : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Help() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Help() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Help(::grpc::ServerContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Clear() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Display() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Display(::grpc::ServerContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Help : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Help() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Help() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Help(::grpc::ServerContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHelp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Clear() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Display() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Display(::grpc::ServerContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisplay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Help : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Help() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::sita::rtb::HelpRequest, ::sita::rtb::HelpReply>(std::bind(&WithStreamedUnaryMethod_Help<BaseClass>::StreamedHelp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Help() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Help(::grpc::ServerContext* context, const ::sita::rtb::HelpRequest* request, ::sita::rtb::HelpReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHelp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sita::rtb::HelpRequest,::sita::rtb::HelpReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::sita::rtb::AddRequest, ::sita::rtb::AddReply>(std::bind(&WithStreamedUnaryMethod_Add<BaseClass>::StreamedAdd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::sita::rtb::AddRequest* request, ::sita::rtb::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sita::rtb::AddRequest,::sita::rtb::AddReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::sita::rtb::DeleteRequest, ::sita::rtb::DeleteReply>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::sita::rtb::DeleteRequest* request, ::sita::rtb::DeleteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sita::rtb::DeleteRequest,::sita::rtb::DeleteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Clear() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::sita::rtb::ClearRequest, ::sita::rtb::ClearReply>(std::bind(&WithStreamedUnaryMethod_Clear<BaseClass>::StreamedClear, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::sita::rtb::ClearRequest* request, ::sita::rtb::ClearReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sita::rtb::ClearRequest,::sita::rtb::ClearReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Display() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::sita::rtb::DisplayRequest, ::sita::rtb::DisplayReply>(std::bind(&WithStreamedUnaryMethod_Display<BaseClass>::StreamedDisplay, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Display(::grpc::ServerContext* context, const ::sita::rtb::DisplayRequest* request, ::sita::rtb::DisplayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisplay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sita::rtb::DisplayRequest,::sita::rtb::DisplayReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Help<WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Clear<WithStreamedUnaryMethod_Display<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Help<WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Clear<WithStreamedUnaryMethod_Display<Service > > > > > StreamedService;
};

}  // namespace rtb
}  // namespace sita


#endif  // GRPC_rtb_2eproto__INCLUDED
